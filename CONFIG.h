//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// НАСТРОЙКИ ПРОШИВКИ, МЕНЯТЬ ЗДЕСЬ !!!
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <Arduino.h>
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// режимы отладки
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define _DEBUG // закомментировать для выключения отладочной информации (плюётся в Serial всякой отладочной инфой)
//#define DEBUG_COMPUTE_DRAW_TIME // выводит в Serial время прорисовки значений одной оси, ТОЛЬКО ДЛЯ ОТЛАДКИ, ЗАКОММЕНТИРОВАТЬ!
//#define DEBUG_RANDOM_GENERATE_VALUES  // значения на линейках изменяются пошагово, ТОЛЬКО ДЛЯ ОТЛАДКИ, ЗАКОММЕНТИРОВАТЬ!
#define DEBUG_RANDOM_GENERATE_MAX 111111 // максимальное значение, на линейках, которое изменяется
#define DEBUG_RANDOM_GENERATE_STEP 3 // шаг изменения значения на линейке в режиме отладки
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define SERIAL_SPEED 57600  // скорость работы с Serial
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// определения типов памяти, поддерживаемых прошивкой (не менять, это просто определения)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define EEPROM_BUILTIN 1 // встроенный EEPROM
#define EEPROM_AT24C32 2 // I2C-память AT24C32 
#define EEPROM_AT24C64 3 // I2C-память AT24C64 
#define EEPROM_AT24C128 4 // I2C-память AT24C128 
#define EEPROM_AT24C256 5 // I2C-память AT24C256 
#define EEPROM_AT24C512 6 // I2C-память AT24C512 
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// какую память используем (менять ниже, на одно из значений, описанных выше)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define EEPROM_USED_MEMORY EEPROM_AT24C128 // I2C-память AT24C128
// если используется внешнняя память AT24C* - то ниже определяется индекс микросхемы. Например, китайский модуль часов реального времени
// с DS3231 на борту имеет модуль памяти с адресом на шине I2C 0x57, т.е. индекс такого модуля - 7, т.к. базовый адрес памяти на шине - 
// 0x50. Настройкой ниже можно указать адрес микросхемы памяти на шине I2C.
#define EEPROM_MEMORY_INDEX 0
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define SETT_HEADER1 0x6E // байты, сигнализирующие о наличии сохранённых настроек, первый
#define SETT_HEADER2 0xEA // и второй
#define ZERO_FACTOR_BASE_STORE_ADDRESS 64 // с какого адреса в EEPROM хранить последние известные значения фактора обнуления оси (на один фактор - 6 байт в EEPROM)
#define RAD_DIA_BASE_STORE_ADDRESS 100 // с какого адреса в EEPROM хранить текущие коэффициенты радиус/диаметр для осей, чтобы сохранять статус переключателей (на запись для одной оси - 3 байта в EEPROM)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// типы поддерживаемых дисплеев (не менять, это просто определения)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define DISPLAY_TFT 1 // 7 '' 800x480 на контроллере SSD1963
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define DISPLAY_USED DISPLAY_TFT // под какой дисплей собираем прошивку
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройки модели и пинов для TFT
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define TFT_MODEL   CTE70   // 7 '' 800x480 на контроллере SSD1963
#define TFT_RS_PIN  38        // TFT RS pin
#define TFT_WR_PIN  39        // TFT WR pin
#define TFT_CS_PIN  40        // TFT CS pin
#define TFT_RST_PIN 41        // TFT RST pin

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройки цветов для TFT (все цвета - в RGB565 !!!)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define BUTTON_COLORS VGA_BLACK, VGA_SILVER, VGA_GRAY, VGA_WHITE, VGA_SILVER // цвета кнопок
#define SCREEN_BACK_COLOR VGA_BLACK          // цвет фона
#define SCREEN_TEXT_COLOR VGA_WHITE          // цвет шрифта
#define AXIS_LABEL_COLOR  0x3DA9           // цвет подписи для оси
#define AXIS_WHOLE_VALUE_COLOR 0x3DA9             // цвет для значения показаний линейки до запятой
#define AXIS_FRACT_VALUE_COLOR 0xA775             // цвет для значения показаний линейки после запятой
#define AXIS_UNIT_COLOR  0x3DA9           // цвет для значения единиц измерений линейки
#define AXIS_NO_DATA_COLOR VGA_YELLOW           // цвет для "нет показаний" линейки
#define INACTIVE_AXIS_COLOR VGA_SILVER      // цвет текста для неактивной оси (выключенной из прошивки)
#define AXIS_DOT_COLOR VGA_YELLOW         // цвет точки-разделитяле целой и дробной частей
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// нстройки интерфейса
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define MAIN_SCREEN_LABELS_X_OFFSET 2 // с какой позиции по X рисовать подписи к линейкам
#define MAIN_SCREEN_LABELS_Y_OFFSET 2 // с какой позиции по Y рисовать подписи к линейкам
#define MAIN_SCREEN_AXIS_V_SPACING 36 // промежуток по Y между осями
#define MAIN_SCREEN_BUTTON_HEIGHT 100 // высота кнопок справа от осей на главном экране
#define MAIN_SCREEN_BOTTOM_BUTTONS_HEIGHT 80 // высота кнопок внизу экрана (переключатель "дюймы/мм" и т.п.)
#define MAIN_SCREEN_BUTTON_H_SPACING 10 // расстояние между кнопками на главном экране, по X
#define MAIN_SCREEN_BUTTON_RIGHT_SPACING 2 // расстояние от кнопки до правой границы экрана
#define MAIN_SCREEN_BUTTON_TEXT_PADDING 12 // расстояние от границы кнопки до текста кнопки, по X
#define MAIN_SCREEN_DATA_X_OFFSET 0 // расстояние от правой границы показаний до управляющих кнопок
#define XYZ_FONT_DOT_WIDTH  14 // ширина точки в шрифте XYZFont (точку не надо выводить во всю ширину символа шрифта)
#define DIGITS_PLACES 6 // кол-во разрядов (не учитывая разряд для минуса)
#define MM_RESOLUTION 2 // кол-во точек после запятой в режиме измерения "мм"
#define INCH_RESOLUTION 4 // кол-во точек после запятой в режиме измерения "дюймы"
//#define USE_COMMA_INSTEAD_OF_DOT // раскомментировать, если вместо точки надо показывать запятую как разделитель целой и дробной частей

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройки тачскрина
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define TFT_TOUCH_CLK_PIN 6
#define TFT_TOUCH_CS_PIN 5
#define TFT_TOUCH_DIN_PIN 4
#define TFT_TOUCH_DOUT_PIN 3
#define TFT_TOUCH_IRQ_PIN 2

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define RESET_TO_MAIN_SCREEN_DELAY  30000 // время в миллисекундах, после которого идёт переключение на главный экран, если какой-то экран висит долгое время
#define DISPLAY_INIT_DELAY          100  // сколько ждать инициализации дисплея, мс
#define TFT_EXTRA_RESET // закомментировать, если не нужен экстра-сброс дисплея при инициализации
#define USE_BACKLIGHT_PIN // закомментировать, если не нужно использовать пин управления подсветкой
#define BACKLIGHT_PIN A0 // номер пина управления подсветкой
#define BACKLIGHT_ON HIGH // уровень включения подстветки

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройки пищалки
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define USE_BUZZER // использовать или нет пищалку (пищит при нажатии на экранные кнопки)
#define BUZZER_TIMER Timer5 // какой таймер использовать для баззера
#define BUZZER_DURATION 60 // сколько миллисекунд включать пищалку
#define BUZZER_BETWEEN_IDLE 100 // пауза между пищаниями, миллисекунд
#define BUZZER_HALT_DURATION 750 // сколько миллисекунд пищать при критической ошибке
#define BUZZER_DRIVE_PIN A10 // пин, на котором висит пищалка
#define BUZZER_ON HIGH // уровень для включения пищалки
#define BUZZER_CONTROLLER_STARTED_COUNT 3 // сколько раз пискнуть при старте контроллера

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// настройки датчиков линеек (используются емкостные с Али, см. README)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#define USE_MM_INCH_SWITCH // закомментировать, если не нужна кнопка переключения "мм/дюймы"
#define MM_CAPTION "MM"     // текст кнопки переключения в мм
#define INCH_CAPTION " ДЮЙМЫ " // текст кнопки переключения в дюймы
#define MM_INCH_SWITCH_BUTTON_COLOR VGA_BLUE // цвет кнопки переключения в дюймы
#define MM_INCH_SWITCH_BUTTON_FONT_COLOR VGA_WHITE // цвет шрифта кнопки переключения в дюймы
//#define DEFAULT_IS_INCH // раскомментировать, если нужно по умолчанию отображать в дюймах

#define INFO_BUTTON_COLOR VGA_BLUE // цвет кнопки информации
#define INFO_BUTTON_FONT_COLOR VGA_WHITE // цвет шрифта кнопки информации
#define INFO_BUTTON_WIDTH 70 // ширина кнопки информации
#define SCREEN_CAPTION_BACK_COLOR VGA_NAVY // цвет заголовка окна
#define SCREEN_CAPTION_FONT_COLOR VGA_WHITE // цвет текста заголовка окна 

#define SCALE_CLOCK_PIN 42 // номер пина для строба линеек
#define STROBE_DURATION 5 // длительность строба на линии DATA, микросекунд
#define DISPLAY_COLON_AFTER_AXIS_NAME // закомментировать, если не надо отображать двоеточие после названия оси

// следующие две настройки нужны, если применяется схема, которая инвертирует любой из сигналов.
// по умолчанию считается, что высокий уровень на пине SCALE_CLOCK_PIN - поднимает шину в высокий уровень,
// а прочитанный высокий уровень с линий *_SCALE_DATA_PIN - означает установленную единицу бита.
// в этих настройках можно поменять это поведение.
#define BIT_IS_SET_LEVEL HIGH // уровень на шине данных, при котором считается, что бит установлен
#define STROBE_HIGH_LEVEL HIGH // уровень на линии CLK шины, который считается высоким

#define USE_X_SCALE // закомментировать, если не нужно использовать линейку по X
#define X_SCALE_DATA_PIN 43 // номер пина DATA для линейки по X
#define X_SCALE_ABS_CAPTION "ABS" // подпись на кнопке абсолютного значения оси X (можно на русском)
#define X_SCALE_REL_CAPTION "REL" // подпись на кнопке относительного значения оси X (можно на русском)
#define X_SCALE_ZERO_CAPTION "ZERO" // подпись на кнопке обнуления значения оси X (можно на русском)
#define X_SCALE_RST_ZERO_CAPTION "RST" // подпись на кнопке сброса обнуления оси X (можно на русском)
//#define USE_X_RAD_DIA_BUTTON // закомментировать, если для оси X не нужна кнопка переключения "радиус/диаметр"
#define X_RAD_CAPTION "X: РАДИУС " // подпись на кнопке переключения "радиус" оси X (умножение на 2 - в режиме диаметра, без умножений - в режиме радиуса), можно на русском
#define X_DIA_CAPTION "X: ДИАМЕТР" // подпись на кнопке переключения "диаметр" оси X (умножение на 2 - в режиме диаметра, без умножений - в режиме радиуса), можно на русском
#define X_RAD_DIA_BUTTON_COLOR VGA_BLUE // цвет кнопки переключения "радиус/диаметр" для оси X
#define X_RAD_DIA_BUTTON_FONT_COLOR VGA_WHITE // цвет шрифта кнопки переключения "радиус/диаметр" для оси X
#define X_RAD_DIA_BUTTON_DIA_SELECTED_BUTTON_COLOR VGA_GREEN // цвет кнопки переключения "радиус/диаметр" в режиме выбранного диаметра, для оси X
#define X_RAD_DIA_BUTTON_DIA_SELECTED_FONT_COLOR VGA_WHITE // цвет текста кнопки переключения "радиус/диаметр" в режиме выбранного диаметра, для оси X
#define USE_X_ABS_HARDWARE_BUTTON // закомментировать, если не нужно использовать для оси X железную кнопку "ABS", дублирующую экранную кнопку
#define X_ABS_HARDWARE_BUTTON_PIN 10 // 46 // номер пина для железной кнопки "ABS" для оси X
#define X_ABS_HARDWARE_BUTTON_TRIGGERED_LEVEL LOW // уровень срабатывания кнопки "ABS" для оси X
#define USE_X_ZERO_HARDWARE_BUTTON // закомментировать, если не нужно использовать для оси X железную кнопку "ZERO", дублирующую экранную кнопку
#define X_ZERO_HARDWARE_BUTTON_PIN 11 // 47 // номер пина для железной кнопки "ZERO" для оси X
#define X_ZERO_HARDWARE_BUTTON_TRIGGERED_LEVEL LOW // уровень срабатывания кнопки "ZERO" для оси X

#define USE_Y_SCALE // закомментировать, если не нужно использовать линейку по Y
#define Y_SCALE_DATA_PIN 44 // номер пина DATA для линейки по Y
#define Y_SCALE_ABS_CAPTION "ABS" // подпись на кнопке абсолютного значения оси Y (можно на русском)
#define Y_SCALE_REL_CAPTION "REL" // подпись на кнопке относительного значения оси Y (можно на русском)
#define Y_SCALE_ZERO_CAPTION "ZERO" // подпись на кнопке обнуления значения оси Y (можно на русском)
#define Y_SCALE_RST_ZERO_CAPTION "RST" // подпись на кнопке сброса обнуления оси Y (можно на русском)
#define USE_Y_RAD_DIA_BUTTON // закомментировать, если для оси Y не нужна кнопка переключения "радиус/диаметр"
#define Y_RAD_CAPTION "Y: РАДИУС " // подпись на кнопке переключения "радиус" оси Y (умножение на 2 - в режиме диаметра, без умножений - в режиме радиуса), можно на русском
#define Y_DIA_CAPTION "Y: ДИАМЕТР" // подпись на кнопке переключения "диаметр" оси Y (умножение на 2 - в режиме диаметра, без умножений - в режиме радиуса), можно на русском
#define Y_RAD_DIA_BUTTON_COLOR VGA_BLUE // цвет кнопки переключения "радиус/диаметр" для оси Y
#define Y_RAD_DIA_BUTTON_FONT_COLOR VGA_WHITE // цвет шрифта кнопки переключения "радиус/диаметр" для оси Y
#define Y_RAD_DIA_BUTTON_DIA_SELECTED_BUTTON_COLOR VGA_GREEN // цвет кнопки переключения "радиус/диаметр" в режиме выбранного диаметра, для оси Y
#define Y_RAD_DIA_BUTTON_DIA_SELECTED_FONT_COLOR VGA_WHITE // цвет текста кнопки переключения "радиус/диаметр" в режиме выбранного диаметра, для оси Y
#define USE_Y_ABS_HARDWARE_BUTTON // закомментировать, если не нужно использовать для оси Y железную кнопку "ABS", дублирующую экранную кнопку
#define Y_ABS_HARDWARE_BUTTON_PIN 48 // номер пина для железной кнопки "ABS" для оси Y
#define Y_ABS_HARDWARE_BUTTON_TRIGGERED_LEVEL LOW // уровень срабатывания кнопки "ABS" для оси Y
#define USE_Y_ZERO_HARDWARE_BUTTON // закомментировать, если не нужно использовать для оси Y железную кнопку "ZERO", дублирующую экранную кнопку
#define Y_ZERO_HARDWARE_BUTTON_PIN 49 // номер пина для железной кнопки "ZERO" для оси Y
#define Y_ZERO_HARDWARE_BUTTON_TRIGGERED_LEVEL LOW // уровень срабатывания кнопки "ZERO" для оси Y

//#define USE_Z_SCALE // закомментировать, если не нужно использовать линейку по Z
#define Z_SCALE_DATA_PIN 45 // номер пина DATA для линейки по Z
#define Z_SCALE_ABS_CAPTION "ABS" // подпись на кнопке абсолютного/относительного значения оси Z (можно на русском)
#define Z_SCALE_REL_CAPTION "REL" // подпись на кнопке относительного значения оси Z (можно на русском)
#define Z_SCALE_ZERO_CAPTION "ZERO" // подпись на кнопке обнуления значения оси Z (можно на русском)
#define Z_SCALE_RST_ZERO_CAPTION "RST" // подпись на кнопке сброса обнуления оси Z (можно на русском)
#define USE_Z_RAD_DIA_BUTTON // закомментировать, если для оси Z не нужна кнопка переключения "радиус/диаметр"
#define Z_RAD_CAPTION "Z: РАДИУС " // подпись на кнопке переключения "радиус" оси Z (умножение на 2 - в режиме диаметра, без умножений - в режиме радиуса), можно на русском
#define Z_DIA_CAPTION "Z: ДИАМЕТР" // подпись на кнопке переключения "диаметр" оси Z (умножение на 2 - в режиме диаметра, без умножений - в режиме радиуса), можно на русском
#define Z_RAD_DIA_BUTTON_COLOR VGA_BLUE // цвет кнопки переключения "радиус/диаметр" для оси Z
#define Z_RAD_DIA_BUTTON_FONT_COLOR VGA_WHITE // цвет шрифта кнопки переключения "радиус/диаметр" для оси Z
#define Z_RAD_DIA_BUTTON_DIA_SELECTED_BUTTON_COLOR VGA_GREEN // цвет кнопки переключения "радиус/диаметр" в режиме выбранного диаметра, для оси Z
#define Z_RAD_DIA_BUTTON_DIA_SELECTED_FONT_COLOR VGA_WHITE // цвет текста кнопки переключения "радиус/диаметр" в режиме выбранного диаметра, для оси Z
#define USE_Z_ABS_HARDWARE_BUTTON // закомментировать, если не нужно использовать для оси Z железную кнопку "ABS", дублирующую экранную кнопку
#define Z_ABS_HARDWARE_BUTTON_PIN 50 // номер пина для железной кнопки "ABS" для оси Z
#define Z_ABS_HARDWARE_BUTTON_TRIGGERED_LEVEL LOW // уровень срабатывания кнопки "ABS" для оси Z
#define USE_Z_ZERO_HARDWARE_BUTTON // закомментировать, если не нужно использовать для оси Z железную кнопку "ZERO", дублирующую экранную кнопку
#define Z_ZERO_HARDWARE_BUTTON_PIN 51 // номер пина для железной кнопки "ZERO" для оси Z
#define Z_ZERO_HARDWARE_BUTTON_TRIGGERED_LEVEL LOW // уровень срабатывания кнопки "ZERO" для оси Z

#define HARDWARE_BUTTONS_TIMER Timer3 // какой таймер использовать для опроса кнопок
#define CHECK_BUTTONS_INTERVAL 20000 // интервал (в микросекундах) опроса кнопок

#define MIN_ALLOWED_SCALE_DATA -999999L // если сырое значение с линейки (в сотых долях миллиметра) меньше этого значения - показания сбросятся на "нет данных"
#define MAX_ALLOWED_SCALE_DATA  999999L // если сырое значение с линейки (в сотых долях миллиметра) больше этого значения - показания сбросятся на "нет данных"
#define SCALES_UPDATE_INTERVAL 100 // через сколько миллисекунд обновлять данные с линеек (не стоит делать это значение слишком маленьким!)
//#define DUMP_SCALE_DATA_TO_SERIAL // закомментировать, если не нужно выводить данные с линеек в Serial


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ДАЛЕЕ - СЛУЖЕБНАЯ ИНФОРМАЦИЯ, НЕ МЕНЯТЬ !!!
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// ||
// \/
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifdef _DEBUG
  #define DBG(s) { Serial.print((s)); }
  #define DBGLN(s) { Serial.print((s)); Serial.println(); }
#else
  #define DBG(s) (void) 0
  #define DBGLN(s) (void) 0
#endif
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------

